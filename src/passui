#!/usr/bin/env python3
"""
A mobile first interface for the standard unix password manager written in python
"""
import os
import subprocess

import wx
import wx.lib.scrolledpanel as scrolled


class PassUi(wx.Frame):
    """
    The wx.Frame for passui
    """
    def __init__(self, *args, **kw):
        """__init__.

        :param args:
        :param kw:
        """
        super().__init__(*args, **kw)
        # Find the top directory and set that to current directory
        self.topdir = os.environ.get('PASSWORD_STORE_DIR')
        if not self.topdir:
            self.topdir = os.environ.get('HOME') + '/.password-store'
        self.curdir = self.topdir
        # create a panel in the frame
        self.pnl = scrolled.ScrolledPanel(self, -1, style=wx.VSCROLL)
        self.pnl.SetupScrolling()
        # and create a sizer to manage the layout of child widgets
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.pnl.SetSizer(self.sizer)
        self.cur_paths = self.get_pass_paths()
        self.cur_passwords = self.get_pass_passwords()
        self.add_buttons()

    def add_buttons(self):
        """add_buttons."""
        self.sizer.Clear(delete_windows=True)
        self.add_tools()
        if self.curdir != self.topdir:
            btn = self.make_back_button()
            self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
            self.Bind(wx.EVT_BUTTON,
                      lambda event: self.path_button_clicked(), btn)
        index = 0
        for cpath in self.cur_paths:
            if cpath != self.curdir:
                label = 'üóÄ ' + os.path.basename(os.path.normpath(cpath))
                btn = wx.Button(self.pnl, label=label)
                self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
                self.Bind(wx.EVT_BUTTON,
                          lambda event, path=cpath: self.path_button_clicked(
                              path),
                          btn)
                index = index + 1
        index = 0
        for password in self.cur_passwords:
            label = 'üóù ' + os.path.splitext(
                os.path.basename(os.path.normpath(password)))[0]
            btn = wx.Button(self.pnl, label=label)
            self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
            self.Bind(wx.EVT_BUTTON,
                      lambda event, mindex=index: self.password_button_clicked(
                          mindex),
                      btn)
            index = index + 1
        self.pnl.SetupScrolling()
        self.sizer.Layout()

    def add_push_pull(self):
        """add_push_pull."""
        pushbtn = wx.Button(self.pnl, label="Push to remote")
        self.sizer.Add(pushbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON, lambda event: pass_push(), pushbtn)
        pullbtn = wx.Button(self.pnl, label="Pull from remote")
        self.sizer.Add(pullbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON, lambda event: pass_pull(), pullbtn)

    def add_tools(self, index=None):
        """add_tools.

        :param index:
        """
        btn = wx.Button(self.pnl, label="Show tools")
        font = btn.GetFont().MakeBold()
        btn.SetFont(font)
        self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON,
                  lambda event, mindex=index: self.show_tools(mindex),
                  btn)

    def back_button_clicked(self, index=None):
        """back_button_clicked.

        :param index:
        """
        if index:
            self.show_password_dialog(index)
        else:
            self.add_buttons()

    def delete_password(self, index):
        """delete_password.

        :param index:
        """
        path = self.get_pass_path_from_index(index, "password")
        dlg = wx.MessageDialog(self.pnl,
                               "Delete " + path + "?",
                               "Are you sure?",
                               style=wx.CANCEL | wx.CANCEL_DEFAULT | wx.OK)
        dlg.SetOKCancelLabels("&Yes", "&Don't delete")
        reply = dlg.ShowModal()
        if reply == wx.ID_CANCEL:
            return
        command1 = ['/usr/bin/pass', 'rm', '-f', path]
        run_command(command1)
        self.move_up()
        self.cur_paths = self.get_pass_paths()
        self.cur_passwords = self.get_pass_passwords()
        self.back_button_clicked()

    def get_pass_path_from_index(self, index, pathtype="path"):
        """get_pass_path_from_index.

        :param index:
        :param pathtype:
        """
        if pathtype == "password":
            result = self.cur_passwords[index]
        else:
            result = self.cur_paths[index]
        return result.replace(self.topdir, '').replace('.gpg', '')

    def get_pass_passwords(self):
        """get_pass_passwords."""
        passwords = []
        for mfile in os.listdir(self.curdir):
            if mfile.endswith(".gpg"):  # and os.path.isfile(mfile):
                passwords.append(os.path.join(self.curdir, mfile))
        passwords = sorted(passwords)
        return passwords

    def get_pass_paths(self):
        """get_pass_paths."""
        dirs = []
        if self.curdir != self.topdir:
            dirs.append(self.curdir)
        for cdir in os.listdir(self.curdir):
            if os.path.isdir(os.path.join(self.curdir,
                                          cdir)) and cdir != ".git":
                dirs.append(os.path.join(self.curdir, cdir))
        dirs = sorted(dirs)
        return dirs

    def make_back_button(self, index=None):
        """make_back_button.

        :param index:
        """
        if index is not None:
            label = self.get_pass_path_from_index(index, "password")
        else:
            label = self.curdir.replace(self.topdir, '')
        btn = wx.Button(self.pnl, label=label + '‚§¥')
        font = btn.GetFont().MakeItalic().MakeBold()
        btn.SetFont(font)
        return btn

    def move_up(self):
        """move_up."""
        if self.curdir == self.topdir:
            return True
        if not os.path.isdir(self.curdir):
            self.curdir = os.path.abspath(os.path.join(self.curdir, os.pardir))
            self.move_up()
        return True

    def password_button_clicked(self, index):
        """password_button_clicked.

        :param index:
        """
        self.show_password_dialog(index)

    def path_button_clicked(self, path=None):
        """path_button_clicked.

        :param path:
        """
        if path is None:
            path = os.path.abspath(os.path.join(self.curdir, os.pardir))
        self.curdir = path
        self.cur_paths = self.get_pass_paths()
        self.cur_passwords = self.get_pass_passwords()
        self.add_buttons()

    def save_to_pass(self, path, text, name=None):
        """save_to_pass.

        :param path:
        :param text:
        :param name:
        """
        fullpath = os.path.dirname(self.topdir + '/' + path.lstrip('/'))
        if name is not None:
            path = name.GetLineText(0)
            fullpath = os.path.dirname(self.topdir + '/' + path.lstrip('/'))
            filename = fullpath + '.gpg'
            if os.path.exists(fullpath) or os.path.exists(filename):
                dlg = wx.MessageDialog(
                    self.pnl,
                    "Path: " + path +
                    " allready exists! Please update password path",
                    "Error",
                    style=wx.OK)
                dlg.ShowModal()
                reply = wx.ID_CANCEL
            else:
                dlg = wx.MessageDialog(self.pnl,
                                       "Save to " + path + "?",
                                       "Are you sure?",
                                       style=wx.CANCEL | wx.CANCEL_DEFAULT
                                       | wx.OK)
                dlg.SetOKCancelLabels("&Yes", "&Don't save")
                reply = dlg.ShowModal()
            if reply == wx.ID_CANCEL:
                return
        password = str()
        for lineno in range(text.GetNumberOfLines()):
            password += text.GetLineText(lineno)
            password += '\n'

        command1 = ['/bin/echo', password.rstrip("\n")]
        command2 = ['/usr/bin/pass', 'insert', '-m', path]
        run_command(command1, command2)
        self.cur_paths = sorted([fullpath] + self.cur_paths)
        self.cur_passwords = self.get_pass_passwords()
        self.back_button_clicked()

    def show_new_dialog(self):
        """show_new_dialog.

        """
        self.sizer.Clear(delete_windows=True)
        passpath = self.curdir.replace(self.topdir, '')
        btn = self.make_back_button()
        self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON,
                  lambda event, path=self.curdir: self.path_button_clicked(
                      path),
                  btn)

        name_sizer = wx.BoxSizer(orient=wx.VERTICAL)  # pylint: disable=no-member
        name_sizer.Add(wx.StaticText(self.pnl, -1, "Password path:"), 0,
                       wx.EXPAND)  # pylint: disable=no-member
        pw_sizer = wx.BoxSizer(orient=wx.VERTICAL)  # pylint: disable=no-member
        pw_sizer.Add(wx.StaticText(self.pnl, -1, "Password:"), 0, wx.EXPAND)  # pylint: disable=no-member
        name = wx.TextCtrl(self.pnl, value=passpath, style=wx.TE_DONTWRAP)
        text = wx.TextCtrl(self.pnl, style=wx.TE_MULTILINE | wx.TE_DONTWRAP)
        sbtn = wx.Button(self.pnl, label="Save password")
        name_sizer.Add(name, 0, wx.EXPAND)  # pylint: disable=no-member
        pw_sizer.Add(text, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(name_sizer, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(pw_sizer, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(sbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON,
                  lambda event, path=passpath, mtext=text, mname=name: self.
                  save_to_pass(path, mtext, mname),
                  sbtn)
        self.pnl.SetupScrolling()
        self.sizer.Layout()
        name.SetFocus()

    def show_password_dialog(self, index):
        """show_password_dialog.

        :param index:
        """
        self.sizer.Clear(delete_windows=True)
        self.add_tools(index)

        passpath = self.get_pass_path_from_index(index, "password")
        cpath = self.topdir + os.path.dirname(passpath)
        password = get_password_from_path(passpath)

        btn = self.make_back_button(index)
        self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(
            wx.EVT_BUTTON,
            lambda event, path=cpath: self.path_button_clicked(path),
            btn)

        sbtn = wx.Button(self.pnl, label="Show/edit password")
        cbtn = wx.Button(self.pnl, label="Copy password")
        dbtn = wx.Button(self.pnl, label="Delete password")
        self.sizer.Add(sbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(cbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(dbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON,
                  lambda event, text=password: copy_to_clipboard(text),
                  cbtn)
        self.Bind(
            wx.EVT_BUTTON,
            lambda event, mindex=index: self.show_password(mindex),
            sbtn)
        self.Bind(
            wx.EVT_BUTTON,
            lambda event, mindex=index: self.delete_password(mindex),
            dbtn)
        self.pnl.SetupScrolling()
        self.sizer.Layout()

    def show_password(self, index):
        """show_password.

        :param index:
        """
        self.sizer.Clear(delete_windows=True)
        self.add_tools(index)
        passpath = self.get_pass_path_from_index(index, "password")
        cpath = self.topdir + os.path.dirname(passpath)
        password = get_password_from_path(passpath)
        btn = self.make_back_button(index)
        self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(
            wx.EVT_BUTTON,
            lambda event, path=cpath: self.path_button_clicked(path),
            btn)

        text = wx.TextCtrl(self.pnl,
                           value=password,
                           style=wx.TE_MULTILINE | wx.TE_DONTWRAP)
        cbtn = wx.Button(self.pnl, label="Copy password")
        sbtn = wx.Button(self.pnl, label="Save password")
        self.sizer.Add(text, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(cbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.sizer.Add(sbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON,
                  lambda event, mtext=password: copy_to_clipboard(mtext),
                  cbtn)
        self.Bind(wx.EVT_BUTTON,
                  lambda event, path=passpath, mtext=text: self.save_to_pass(
                      path, mtext),
                  sbtn)
        self.pnl.SetupScrolling()
        self.sizer.Layout()

    def show_tools(self, index=None):
        """show_tools.

        :param index:
        """
        self.sizer.Clear(delete_windows=True)
        btn = wx.Button(self.pnl, label="Go back")
        font = btn.GetFont().MakeBold()
        btn.SetFont(font)
        self.sizer.Add(btn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(
            wx.EVT_BUTTON,
            lambda event, mindex=index: self.back_button_clicked(mindex),
            btn)
        nbtn = wx.Button(self.pnl, label="Add new password")
        font = nbtn.GetFont().MakeBold()
        nbtn.SetFont(font)
        self.sizer.Add(nbtn, 0, wx.EXPAND)  # pylint: disable=no-member
        self.Bind(wx.EVT_BUTTON, lambda event: self.show_new_dialog(),
                  nbtn)
        self.add_push_pull()
        self.pnl.SetupScrolling()
        self.sizer.Layout()


def copy_to_clipboard(text):
    """copy_to_clipboard.

    :param text:
    """
    password = text.split('\n')[0]
    command1 = ['/bin/echo', password]
    command2 = ['/usr/bin/wl-copy']
    result = run_command(command1, command2)
    return result


def get_password_from_path(passpath):
    """get_password_from_path.

    :param passpath:
    """
    result = run_command(['/usr/bin/pass', 'show', passpath])
    password = result[0].decode()
    return password


def pass_pull():
    """pass_pull.

    """
    run_command(['/usr/bin/pass', 'git', 'pull'])


def pass_push():
    """pass_push.

    """
    run_command(['/usr/bin/pass', 'git', 'push'])


def run_command(command1, command2=None):
    """Run a command on system and capture result

    :param command1:
    :param command2:
    """
    process1 = subprocess.Popen(command1,
                                shell=False,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
    # If there is a second command it is taken to be a pipline
    if command2:
        subprocess.Popen(command2,
                         shell=False,
                         stdin=process1.stdout,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
        process1.stdout.close()
    return process1.communicate()


if __name__ == '__main__':
    # When this module is run (not imported) then create the app, the
    # frame, show it, and start the event loop.
    app = wx.App()
    frm = PassUi(None, title='PassUi')
    frm.Show()
    app.MainLoop()
